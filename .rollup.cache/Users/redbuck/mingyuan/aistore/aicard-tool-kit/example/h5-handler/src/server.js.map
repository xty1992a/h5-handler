{"version":3,"file":"server.js","sourceRoot":"","sources":["server.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebSocket, WebSocketServer } from \"ws\";\n// import {EventEmitter} from 'events'\n// import { URL } from \"url\";\nconst sleep = (time: number) => new Promise(resolve => setTimeout(resolve, time));\nconst rdm = () => Math.random().toString(36).substr(2, 15);\nconst {URL} = require('url');\nconst {EventEmitter} = require('events');\n\ninterface Option {\n  port: number\n  key: string\n}\n\nconst event = new EventEmitter();\n\nclass Server {\n  server: WebSocketServer | undefined;\n  socket: WebSocket | undefined;\n  timeout = 3000;\n  readyQueue: Function[] = []\n  option: Option = {\n    port: 0,\n    key: ''\n  }\n\n  constructor(option: Option) {\n    option && this.start(option)\n  }\n\n  processLink(link: string) {\n    const url = new URL(link)\n    const {port, key} = this.option\n    url.searchParams.set(\"socket\", `ws://localhost:${port}`);\n    url.searchParams.set(\"socket_key\", key);\n\n    return url.toString()\n  }\n\n  /**\n   * 启动ws服务器\n   * */\n  start({ port, key }: Option) {\n    this.server = new WebSocketServer({ port });\n    this.option = {port, key}\n    console.log(\"server starts on ws://localhost:\" + port);\n    console.log()\n    console.log()\n  }\n\n  /**\n   * 关闭ws服务器\n   * */\n  stop() {\n    this.server?.close();\n\n    this.server = undefined\n    this.socket = undefined\n    console.log()\n    console.log('sever stop')\n    console.log('see u next time~')\n    console.log()\n    console.log()\n  }\n\n  /**\n   * @description 启动监听，必须在客户端之前调用\n   * 随后可以await connected()确保客户端连接成功\n   * 一次只接受一个客户端连接\n   * @return void\n   * */\n  listen = () => {\n    if (!this.server) return\n    const wss = this.server;\n    console.log('server await client connecting...')\n    console.log()\n    console.log()\n\n    const connection = (ws: WebSocket) => {\n      console.log(\"server connect new client\");\n      ws.once(\"message\", (data) => {\n        try {\n          const { payload, type } = JSON.parse(data.toString());\n          console.log(\"client connect by \", type, payload.key, this.option.key);\n          if (type !== \"key\" && payload.key !== this.option.key) return;\n          connect();\n        } catch (e) {\n        }\n      });\n\n      const connect = () => {\n        this.readyQueue.forEach(fn => fn())\n        this.readyQueue = []\n        console.log(\"client key ok, start service...\");\n        console.log()\n        ws.on(\"message\", function message(data) {\n          try {\n            const { payload, type } = JSON.parse(data.toString());\n            event.emit(type, payload);\n          } catch (e) {\n          }\n          // console.log('received %s', data)\n          event.emit(\"received\", data);\n        });\n        this.socket = ws;\n        this.send(\"connected\", {});\n      };\n    };\n    wss.once(\"connection\", connection);\n  };\n\n  /**\n   * @description 等待客户端连接成功(可多次调用，全部将得到通知)\n   * @return Promise<void>\n   * */\n  connected = () => new Promise(resolve => {\n    this.readyQueue.push(resolve)\n  })\n\n  /**\n   * @description 关闭连接（此后可以重新listen，等待新的客户端连接）\n   * @return void\n   * */\n  unListen = () => {\n    console.log('disconnect client')\n    console.log()\n    console.log()\n    this.readyQueue = []\n    this.socket = undefined\n  };\n\n  /**\n   * @description 发送一个消息到客户端\n   * @param type 关键字\n   * @param payload 载荷\n   * @param extra 不放在载荷里的额外字段\n   * */\n  send(type: string, payload: any, extra: Record<string, any> = {}) {\n    this.socket?.send(JSON.stringify({ type, payload, ...extra }));\n  }\n\n  /**\n   * @description 询问页面一些事情，type区分类型，payload为特定类型的线索\n   * @param type 关键字\n   * @param payload 载荷\n   * @param timeout 超时时长，超时将直接resolve null\n   * @return Promise<any | null>\n   * */\n  request(type: string, payload: any, timeout = this.timeout) {\n    return new Promise(resolve => {\n      const reply = rdm();\n\n      const timer = setTimeout(() => {\n        console.log(\"ask \", type, \"超时未返回，自动拒绝\", timeout);\n        event.emit(reply, null);\n      }, timeout);\n\n      event.once(reply, (e: any) => {\n        clearTimeout(timer);\n        resolve(e);\n      });\n\n      this.send(type, payload, { reply });\n    });\n  }\n\n  /**\n   * @description 等待页面出现某个元素，或等待一段时间；\n   *\n   * @param selectorOrTime 选择器或时间\n   * @param step 传递选择器时，会轮询选择器，此字段为轮询间隔\n   * @return Promise<void>\n   * */\n  async waitFor(selectorOrTime: string | number, step=50) {\n    if (typeof selectorOrTime === \"number\") return sleep(selectorOrTime);\n    let timer = 0;\n    while (1) {\n      if (await this.$(selectorOrTime)) return;\n      timer++;\n      await sleep(step);\n      // console.log(\"waiting...\", timer);\n    }\n  }\n\n  /**\n   * @description 选择页面上的某个元素\n   * @param selector css选择器，支持所有web选择器\n   * @return Promise<{payload: {rect: DOMRect, text: String}, click: () => void} | null>\n   * */\n  $(selector: string) {\n    return new Promise(async resolve => {\n      // this.send('query', {selector, key: rdm() })\n      const payload = await this.request(\"query\", selector);\n      if (!payload) return resolve(null);\n      resolve({\n        click: () => this.request(\"click\", selector),\n        payload\n      });\n    });\n  }\n\n}\n\nexport default Server\n"]}